commontemplate.syntaxSetting=$syntax
syntax="${}#*!end"

commontemplate.directiveHandlerProvider=org.commontemplate.standard.directive.StandardDirectiveHandlerProvider()
commontemplate.directiveHandlerProvider.defaultLineDirectiveHandler=$defaultLineDirectiveHandler
defaultLineDirectiveHandler=org.commontemplate.standard.directive.macro.MacroDefaultLineDirectiveHandler()
commontemplate.directiveHandlerProvider.defaultBlockDirectiveHandler=$defaultBlockDirectiveHandler
defaultBlockDirectiveHandler=org.commontemplate.standard.directive.macro.MacroDefaultBlockDirectiveHandler()
commontemplate.directiveHandlerProvider.defaultBlockDirectiveRegex=$defaultBlockDirectiveRegex
defaultBlockDirectiveRegex=.*_block
commontemplate.directiveHandlerProvider.directiveHandlers=directive{}
directive{}=org.commontemplate.standard.directive.output.OutputDirectiveHandler()
directive{out}=org.commontemplate.standard.directive.output.OutputStartDirectiveHandler()
directive{msg}=org.commontemplate.standard.directive.output.I18nMessageDirectiveHandler()
directive{message}=org.commontemplate.standard.directive.output.I18nMessageStartDirectiveHandler()
directive{if}=org.commontemplate.standard.directive.condition.IfDirectiveHandler()
directive{elseif}=org.commontemplate.standard.directive.condition.ElseIfDirectiveHandler()
directive{else}=org.commontemplate.standard.directive.condition.ElseDirectiveHandler()
directive{for}=org.commontemplate.standard.directive.iteration.ForeachDirectiveHandler()
directive{for}.statusName=for
directive{forelse}=org.commontemplate.standard.directive.iteration.ForeachElseDirectiveHandler()
directive{break}=org.commontemplate.standard.directive.iteration.BreakDirectiveHandler()
directive{continue}=org.commontemplate.standard.directive.iteration.ContinueDirectiveHandler()
directive{cycle}=org.commontemplate.standard.directive.iteration.CycleDirectiveHandler()
directive{set}=org.commontemplate.standard.directive.variable.VariableAssignDirectiveHandler()
directive{init}=org.commontemplate.standard.directive.variable.VariableInitializeDirectiveHandler()
directive{var}=org.commontemplate.standard.directive.variable.VariableDefineDirectiveHandler()
directive{macro}=org.commontemplate.standard.directive.macro.MacroDirectiveHandler()
directive{inner}=org.commontemplate.standard.directive.macro.InnerDirectiveHandler()
directive{import}=org.commontemplate.standard.directive.macro.ImportAsMacroDirectiveHandler()
directive{include}=org.commontemplate.standard.directive.include.IncludeTemplateDirectiveHandler()
directive{inline}=org.commontemplate.standard.directive.include.InlineTemplateDirectiveHandler()
directive{display}=org.commontemplate.standard.directive.include.DisplayFileDirectiveHandler()
directive{block}=org.commontemplate.standard.directive.block.BlockDefineDirectiveHandler()
directive{show}=org.commontemplate.standard.directive.block.ShowBlockDirectiveHandler()
directive{using}=org.commontemplate.standard.directive.block.UsingAsMacroDirectiveHandler()
directive{eval}=org.commontemplate.standard.directive.eval.EvaluateDirectiveHandler()
directive{exec}=org.commontemplate.standard.directive.eval.ExecuteDirectiveHandler()
directive{zone}=org.commontemplate.standard.directive.extend.ZoneDirectiveHandler()
directive{extends}=org.commontemplate.standard.directive.extend.ExtendDirectiveHandler()
directive{overzone}=org.commontemplate.standard.directive.extend.OverZoneDirectiveHandler()
directive{superzone}=org.commontemplate.standard.directive.extend.SuperZoneDirectiveHandler()
directive{time}=org.commontemplate.standard.directive.debug.TimeDirectiveHandler()
directive{log}=org.commontemplate.standard.directive.debug.LogDirectiveHandler()
directive{stop}=org.commontemplate.standard.directive.debug.StopDirectiveHandler()
directive{filter}=org.commontemplate.standard.directive.filter.FilterDirectiveHandler()
directive{filter}.valueName=value
directive{filterAll}=org.commontemplate.standard.directive.filter.FilterAllDirectiveHandler()
directive{filterAll}.valueName=value
directive{compress}=org.commontemplate.standard.directive.filter.compress.CompressSpaceDirectiveHandler()
directive{escape}=org.commontemplate.standard.directive.filter.escape.EscapeDirectiveHandler()
directive{escape}.filters=escape{}
escape{html}=org.commontemplate.standard.directive.filter.escape.HtmlEscapeFilter()
escape{js}=org.commontemplate.standard.directive.filter.escape.JavaScriptEscapeFilter()
escape{url}=org.commontemplate.standard.directive.filter.escape.UrlEscapeFilter()
escape{base64}=org.commontemplate.standard.directive.filter.escape.Base64EscapeFilter()
