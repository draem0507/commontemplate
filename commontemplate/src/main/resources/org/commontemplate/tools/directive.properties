commontemplate.syntaxSettings=$syntax
syntax=org.commontemplate.standard.syntax.SyntaxSettings()
syntax.directiveLeader='$'
syntax.expressionBegin='{'
syntax.expressionEnd='}'
syntax.lineComment='#'
syntax.blockComment='*'
syntax.noParse='!'
syntax.endDirectiveName=end

commontemplate.directiveHandlerProvider=org.commontemplate.standard.directive.StandardDirectiveHandlerProvider()
commontemplate.directiveHandlerProvider.defaultLineDirectiveHandler=$defaultLineDirectiveHandler
defaultLineDirectiveHandler=org.commontemplate.standard.directive.macro.MacroDefaultLineDirectiveHandler()
commontemplate.directiveHandlerProvider.defaultBlockDirectiveHandler=$defaultBlockDirectiveHandler
defaultBlockDirectiveHandler=org.commontemplate.standard.directive.macro.MacroDefaultBlockDirectiveHandler()
defaultBlockDirectiveHandler.defaultBlockDirectiveSuffix=$defaultBlockDirectiveSuffix
commontemplate.directiveHandlerProvider.defaultBlockDirectiveSuffix=$defaultBlockDirectiveSuffix
defaultBlockDirectiveSuffix=.block
commontemplate.directiveHandlerProvider.directiveHandlers=directive{}
directive{}=org.commontemplate.standard.directive.output.OutputDirectiveHandler()
directive{out}=org.commontemplate.standard.directive.output.OutputStartDirectiveHandler()
directive{msg}=org.commontemplate.standard.directive.output.I18nMessageDirectiveHandler()
directive{msg}.messageSource=$messageSource
directive{message}=org.commontemplate.standard.directive.output.I18nMessageStartDirectiveHandler()
directive{message}.messageSource=$messageSource
messageSource=org.commontemplate.standard.i18n.ResourceBundleMessageSource()
messageSource.resourceBundleProvider=$resourceBundleProvider
resourceBundleProvider=org.commontemplate.standard.i18n.PropertiesResourceBundleProvider()
resourceBundleProvider.basename=$messagesBasename
messagesBasename=org/commontemplate/tools/messages
directive{if}=org.commontemplate.standard.directive.condition.IfDirectiveHandler()
directive{elseif}=org.commontemplate.standard.directive.condition.ElseIfDirectiveHandler()
directive{else}=org.commontemplate.standard.directive.condition.ElseDirectiveHandler()
directive{forelse}=org.commontemplate.standard.directive.condition.ElseDirectiveHandler()
directive{for}=org.commontemplate.standard.directive.iteration.ForeachDirectiveHandler()
directive{for}.statusName=for
directive{for}.collectionConverters=collectionConverter{}
collectionConverter{java.lang.Object[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{boolean[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{char[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{byte[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{short[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{int[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{long[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{float[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{double[]}=org.commontemplate.standard.converter.ArrayCollectionConverter()
collectionConverter{java.util.Map}=org.commontemplate.standard.converter.MapCollectionConverter()
collectionConverter{java.util.Iterator}=org.commontemplate.standard.converter.IteratorCollectionConverter()
collectionConverter{java.util.Enumeration}=org.commontemplate.standard.converter.EnumerationCollectionConverter()
collectionConverter{java.sql.ResultSet}=org.commontemplate.standard.converter.ResultSetCollectionConverter()
collectionConverter{org.w3c.dom.NodeList}=org.commontemplate.standard.converter.NodeListCollectionConverter()
directive{break}=org.commontemplate.standard.directive.iteration.BreakDirectiveHandler()
directive{continue}=org.commontemplate.standard.directive.iteration.ContinueDirectiveHandler()
directive{cycle}=org.commontemplate.standard.directive.iteration.CycleDirectiveHandler()
directive{set}=org.commontemplate.standard.directive.variable.VariableAssignDirectiveHandler()
directive{init}=org.commontemplate.standard.directive.variable.VariableInitializeDirectiveHandler()
directive{var}=org.commontemplate.standard.directive.variable.VariableDefineDirectiveHandler()
directive{local}=org.commontemplate.standard.directive.variable.VariableDefineDirectiveHandler()
directive{super}=org.commontemplate.standard.directive.variable.SuperAssignDirectiveHandler()
directive{root}=org.commontemplate.standard.directive.variable.RootAssignDirectiveHandler()
directive{global}=org.commontemplate.standard.directive.variable.GlobalAssignDirectiveHandler()
directive{macro}=org.commontemplate.standard.directive.macro.MacroDirectiveHandler()
directive{return}=org.commontemplate.standard.directive.macro.ReturnDirectiveHandler()
directive{inner}=org.commontemplate.standard.directive.macro.InnerDirectiveHandler()
directive{import}=org.commontemplate.standard.directive.macro.ImportAsMacroDirectiveHandler()
directive{import}.macroImporter=$macroImporter
macroImporter=org.commontemplate.standard.directive.macro.MacroImporter()
macroImporter.namespaceSeparator=.
directive{using}=org.commontemplate.standard.directive.macro.UsingAsMacroDirectiveHandler()
directive{using}.macroDirectiveName=macro
directive{include}=org.commontemplate.standard.directive.include.IncludeTemplateDirectiveHandler()
directive{embed}=org.commontemplate.standard.directive.include.EmbedTemplateDirectiveHandler()
directive{display}=org.commontemplate.standard.directive.include.DisplayFileDirectiveHandler()
directive{block}=org.commontemplate.standard.directive.block.BlockDefineDirectiveHandler()
directive{show}=org.commontemplate.standard.directive.block.ShowBlockDirectiveHandler()
directive{eval}=org.commontemplate.standard.directive.eval.EvaluateDirectiveHandler()
directive{exec}=org.commontemplate.standard.directive.eval.ExecuteDirectiveHandler()
directive{zone}=org.commontemplate.standard.directive.extend.ZoneDirectiveHandler()
directive{extends}=org.commontemplate.standard.directive.extend.ExtendDirectiveHandler()
directive{overzone}=org.commontemplate.standard.directive.extend.OverZoneDirectiveHandler()
directive{superzone}=org.commontemplate.standard.directive.extend.SuperZoneDirectiveHandler()
directive{stop}=org.commontemplate.standard.directive.template.StopDirectiveHandler()
directive{setting}=org.commontemplate.standard.directive.template.SettingDirectiveHandler()
directive{time}=org.commontemplate.standard.directive.debug.TimeDirectiveHandler()
directive{log}=org.commontemplate.standard.directive.debug.LogDirectiveHandler()
directive{log}.logger=$logger
logger=org.commontemplate.standard.log.SimpleLogger()
#logger=org.commontemplate.standard.log.CommonsLogging()
directive{assert}=org.commontemplate.standard.directive.debug.AssertDirectiveHandler()
directive{try}=org.commontemplate.standard.directive.debug.TryDirectiveHandler()
directive{catch}=org.commontemplate.standard.directive.debug.CatchDirectiveHandler()
directive{breakpoint}=org.commontemplate.standard.directive.debug.BreakpointDirectiveHandler()
directive{.}=org.commontemplate.standard.directive.debug.BreakpointDirectiveHandler()
#directive{convert}=org.commontemplate.standard.directive.filter.ConvertDirectiveHandler()
#directive{convert}.valueName=value
directive{filter}=org.commontemplate.standard.directive.filter.FilterDirectiveHandler()
directive{filter}.valueName=value
directive{filterall}=org.commontemplate.standard.directive.filter.FilterAllDirectiveHandler()
directive{filterall}.valueName=value
directive{filterAll}=org.commontemplate.standard.directive.filter.FilterAllDirectiveHandler()
directive{filterAll}.valueName=value
directive{buffer}=org.commontemplate.standard.directive.filter.BufferDirectiveHandler()
directive{buffer}.valueName=value
directive{capture}=org.commontemplate.standard.directive.filter.CaptureDirectiveHandler()
directive{ignore}=org.commontemplate.standard.directive.filter.IgnoreDirectiveHandler()
directive{compress}=org.commontemplate.standard.directive.filter.space.CompressSpaceDirectiveHandler()
directive{strip}=org.commontemplate.standard.directive.filter.space.StripSpaceDirectiveHandler()
directive{trim}=org.commontemplate.standard.directive.filter.space.TrimSpaceDirectiveHandler()
directive{ltrim}=org.commontemplate.standard.directive.filter.space.LeftTrimSpaceDirectiveHandler()
directive{rtrim}=org.commontemplate.standard.directive.filter.space.RightTrimSpaceDirectiveHandler()
directive{leftTrim}=org.commontemplate.standard.directive.filter.space.LeftTrimSpaceDirectiveHandler()
directive{rightTrim}=org.commontemplate.standard.directive.filter.space.RightTrimSpaceDirectiveHandler()
directive{escape}=org.commontemplate.standard.directive.filter.escape.EscapeDirectiveHandler()
directive{escape}.filters=escape{}
escape{html}=org.commontemplate.standard.directive.filter.escape.HtmlEscapeFilter()
escape{js}=org.commontemplate.standard.directive.filter.escape.JavaScriptEscapeFilter()
escape{url}=org.commontemplate.standard.directive.filter.escape.UrlEscapeFilter()
escape{base64}=org.commontemplate.standard.directive.filter.escape.Base64EscapeFilter()
directive{data}=org.commontemplate.standard.directive.data.DataDirectiveHandler()
directive{data}.dataProviders=$dataProviders
directive{load}=org.commontemplate.standard.directive.data.LoadDataDirectiveHandler()
directive{load}.dataProviders=$dataProviders
dataProviders=dataProvider{}
dataProvider{xml}=org.commontemplate.standard.data.XmlDataProvider()
dataProvider{json}=org.commontemplate.standard.data.JsonDataProvider()
dataProvider{properties}=org.commontemplate.standard.data.PropertiesDataProvider()
dataProvider{yaml}=org.commontemplate.standard.data.YamlDataProvider()
directive{keyword}=org.commontemplate.standard.directive.filter.code.KeywordDirectiveHandler()
directive{keyword}.color=red
directive{code}=org.commontemplate.standard.directive.filter.code.CodeDirectiveHandler()
directive{code}.filters=codeFilter{}
codeFilter{java}=org.commontemplate.standard.directive.filter.code.JavaCodeFilter()
codeFilter{xml}=org.commontemplate.standard.directive.filter.code.XmlCodeFilter()
codeFilter{html}=org.commontemplate.standard.directive.filter.code.XmlCodeFilter()
codeFilter{properties}=org.commontemplate.standard.directive.filter.code.PropertiesCodeFilter()
codeFilter{ini}=org.commontemplate.standard.directive.filter.code.PropertiesCodeFilter()
directive{snatch}=org.commontemplate.standard.directive.include.SnatchDirectiveHandler()
